-- Create the restaurants table
CREATE TABLE restaurants (
    restaurant_id INT PRIMARY KEY,
    restaurant_name VARCHAR(100),
    city VARCHAR(50)
);

-- Insert restaurant data
INSERT INTO restaurants (restaurant_id, restaurant_name, city) VALUES
(1, 'Pizza Palace', 'Chennai'),
(2, 'Curry House', 'Chennai'),
(3, 'Burger Hub', 'Bangalore'),
(4, 'Sushi Bay', 'Bangalore');

-- Create the orders table
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    restaurant_id INT,
    total_amount DECIMAL(10,2),
    order_date DATE,
    FOREIGN KEY (restaurant_id) REFERENCES restaurants(restaurant_id)
);

-- Insert order data
INSERT INTO orders (order_id, restaurant_id, total_amount, order_date) VALUES
(101, 1, 500, '2024-01-01'),
(102, 1, 700, '2024-01-05'),
(103, 2, 200, '2024-01-03'),
(104, 2, 300, '2024-01-06'),
(105, 3, 1000, '2024-01-02'),
(106, 3, 500, '2024-01-04'),
(107, 4, 400, '2024-01-07');

select * from restaurants;
select * from orders;
 -- Management wants to find restaurants that are performing above the city average revenue.
 with resturent_data as (
 
 select r.restaurant_name, r.city, sum(o.total_amount) as total_revenue, count(o.order_date) as total_orders from restaurants r 
 left join orders o on o.restaurant_id = r.restaurant_id
 group by r.restaurant_id
 ),
 city_revenue as(
 
 select  r.city, avg(r.total_revenue) as city_avg from resturent_data r group by r.city
 
 )
 select r.restaurant_name, r.city, r.total_revenue, r.total_orders, c.city_avg from resturent_data r 
 left join city_revenue c on r.city=c.city where r.total_revenue >c.city_avg;
 
 
 
 
